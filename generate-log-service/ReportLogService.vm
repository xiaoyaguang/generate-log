package app.game.service.log;

import com.google.inject.Inject;

import com.lmax.disruptor.RingBuffer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import app.utils.IDUtils;

#foreach($className in $importClasses)
import $className;
#end

/**
 * 日志服务
 * This is an auto generated source,please don't modify it.
 */
public class LogService {
	
	private static final Logger logger = LoggerFactory.getLogger(LogService.class);

	private final LogManager logManager;

    @Inject
    public LogService(LogManager logManager) {
        this.logManager = logManager;
    }

    public String generateGeneralEventId(int operatorID, int serverID) {
        return generateEventId(operatorID, serverID, LogType.General);
    }

    public String generateEventId(int operatorID, int serverID, LogType logType) {
        return IDUtils.newEventID(operatorID, serverID, logType.ordinal(),
                logManager.secondTime.getValue());
    }

    public void shutdown() {
        this.logManager.shutdown();
    }

    public enum LogType {
        General,
#foreach($logMethod in $list)
        ${logMethod.logName},
#end
    }

#foreach($logMethod in $list)
#if(${logMethod.eventIdGenerateType} == "AUTO_GENERATE_AND_PASS_IN")

    public void log${logMethod.logName}(
    $logMethod.noEventIdArgs
    ) {
            String iEventId = generateEventId(${logMethod.howToGetOperator}, ${logMethod.howToGetServerId}, LogType.${logMethod.logName});

        $logMethod.containEventIdMethodCall
    }

#end
	/**
	 * $logMethod.description
	 * $logMethod.remark
$logMethod.fieldDescription
	 */
	public void log${logMethod.logName}(
			$logMethod.args
		) {
		try {
#if(${logMethod.eventIdGenerateType} == "AUTO_GENERATE")
            String iEventId = generateEventId(${logMethod.howToGetOperator}, ${logMethod.howToGetServerId}, LogType.${logMethod.logName});
#end

			RingBuffer<LogEvent> ringBuffer = logManager.ringBuffer;
            long sequence = ringBuffer.next();
            try {
                LogEvent e = ringBuffer.get(sequence);
                e.operatorID = $logMethod.howToGetOperator;

$logMethod.setter
            } finally {
                ringBuffer.publish(sequence);
            }
		} catch (Exception e) {
			logger.error("日志log${logMethod.logName}记录错误：", e);
		}
	}
	
#end
}